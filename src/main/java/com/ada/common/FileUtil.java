package com.ada.common;import org.apache.commons.io.FileUtils;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.apache.poi.ss.usermodel.*;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import java.io.File;import java.io.FileFilter;import java.io.FileInputStream;import java.io.IOException;import java.util.*;/** * File Utility * * @author HungNV * @version $Revision: 18978 $ */public class FileUtil {    private static final String SUFFIX = ".dat";    private static final String SUFFIX_DOC = ".doc";    private static final String SUFFIX_DOCX = ".docx";    private static Logger logger = LogManager.getLogger(FileUtil.class);    /**     * Create new file     *     * @param directory for file directory     * @param prefix    for file prefix     * @return file created or null if process exception     * @throws Exception for exception     * @author GiangVT     */    public static File createNewFile(String directory, String prefix) throws Exception {        File dirs = new File(directory);        if (!dirs.exists()) {            dirs.mkdirs();        }        File file = File.createTempFile(prefix, SUFFIX, dirs);        return file;    }    public static File createNewFileDotDoc(String directory, String prefix) throws Exception {        File dirs = new File(directory);        if (!dirs.exists()) {            dirs.mkdirs();        }        File file = File.createTempFile(prefix, SUFFIX_DOC, dirs);        return file;    }    public static File createNewFileDotDocX(String directory, String prefix) throws Exception {        File dirs = new File(directory);        if (!dirs.exists()) {            dirs.mkdirs();        }        File file = File.createTempFile(prefix, SUFFIX_DOCX, dirs);        return file;    }    public static File createNewFileYCTT(String directory, String prefix, String suffix) throws Exception {        File dirs = new File(directory);        if (!dirs.exists()) {            dirs.mkdirs();        }        File file = File.createTempFile(prefix, "." + suffix, dirs);        return file;    }    /**     * Delete over 10 days log files     */    public static void deleteLogFile() {        File logFolder = new File("/home/npo/web/log");        if (!logFolder.exists()) {            return;        }        FileFilter ff = new FileFilter() {            public boolean accept(File f) {                //Loc file qua 10 ngay                if (Calendar.getInstance().getTimeInMillis() - f.lastModified() > 864000000) {                    return true;                } else {                    return false;                }            }        };        File[] logFiles = logFolder.listFiles(ff);        for (File file : logFiles) {            file.delete();        }    }    public static Boolean deleteFile(String filePath) {        try {            if (filePath == null) {                return false;            }            File file = new File(filePath);            if (!file.exists()) {                return false;            } else {                file.delete();                return true;            }        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    public static String readFile(String path) {        File file = new File(path);        return readFileContent(file);    }    //Đọc file excel    public static List<Map<String, String>> readExcel(String text, String listSeparator) {        List<Map<String, String>> result = new ArrayList();        if (!isNullOrEmpty(text)) {            String[] lines = text.split("/n");            String[] headers = lines[0].split(listSeparator);            for (int i = 1; i < lines.length; ++i) {                String[] values = lines[i].split(listSeparator);                Map<String, String> entries = new HashMap();                for (int j = 0; j < headers.length && j < values.length; ++j) {                    String header = trim(headers[j]);                    String value = trim(values[j]);                    if (!isNullOrEmpty(value)) {                        if (entries.containsKey(header)) {                            throw new RuntimeException(String.format("Csv data with header = %s in line %s is already existed", header, i));                        }                        entries.put(header, value);                    } else {                        logger.error(String.format("Header = %s in line %s is not enought", header, i));                        System.out.println(String.format("Header = %s in line %s is not enought", header, i));                        entries.put(header, null);                    }                }                if (entries.size() > 0) {                    result.add(entries);                }            }        }        return result;    }//    public static List<List<Map<String, String>>> readExcel(String text, String listSeparator) {//        List<List<Map<String, String>>> results = new ArrayList<>();//        List<Map<String, String>> result = null;//        if (!isNullOrEmpty(text)) {//            String[] sheet = text.split("</sheet>");//            for (int s = 0; s < sheet.length; s++) {////                text = sheet[s];//                result = new ArrayList<>();////                String[] lines = text.split("/n");//                String[] headers = lines[0].split(listSeparator);////                for (int i = 1; i < lines.length; ++i) {//                    String[] values = lines[i].split(listSeparator);//                    Map<String, String> entries = new HashMap();////                    for (int j = 0; j < headers.length && j < values.length; ++j) {//                        String header = trim(headers[j]);//                        String value = trim(values[j]);//                        if (!isNullOrEmpty(value)) {//                            if (entries.containsKey(header)) {//                                throw new RuntimeException(String.format("Csv data with header = %s in line %s is already existed", header, i));//                            }//                            entries.put(header, value);//                        } else {//                            System.out.println(String.format("Header = %s in line %s is not enought", header, i));//                            entries.put(header, null);//                        }//                    }////                    if (entries.size() > 0) {//                        result.add(entries);//                    }//                }//                results.add(result);//            }//        }//        return results;//    }    public static String readFileContentExcel(String path) {        String text = "";        // Creating a Workbook from an Excel file (.xls or .xlsx)        try {            FileInputStream excelFile = new FileInputStream(new File(path));            Workbook workbook = new XSSFWorkbook(excelFile);//            Workbook workbook = WorkbookFactory.create(new File(path));            System.out.println(String.format("Have %s sheet on this workbook", workbook.getNumberOfSheets()));            logger.info(String.format("Have %s sheet on this workbook", workbook.getNumberOfSheets()));            Sheet sheet = null;            for (int i = 0; i < workbook.getNumberOfSheets(); i++) {                if (workbook.isSheetHidden(i)) {                    continue;                }                sheet = workbook.getSheetAt(i);                // Create a DataFormatter to format and get each cell's value as String                DataFormatter dataFormatter = new DataFormatter();                // 1. You can obtain a rowIterator and columnIterator and iterate over them                Iterator<Row> rowIterator = sheet.rowIterator();                while (rowIterator.hasNext()) {                    Row row = rowIterator.next();                    // Now let's iterate over the columns of the current row                    Iterator<Cell> cellIterator = row.cellIterator();                    int flagCell = 0;                    while (cellIterator.hasNext()) {                        Cell cell = cellIterator.next();                        String cellValue = dataFormatter.formatCellValue(cell);                        if (!cellValue.equals("")) {                            if (text.equals("")) {                                text = cellValue;                                flagCell++;                            } else {                                if (flagCell == 0) {                                    text += cellValue;                                    flagCell++;                                } else {                                    text = text + ";" + cellValue;                                    flagCell++;                                }                            }                        }                    }                    text += "/n";                }            }            // Closing the workbook            workbook.close();            return text;        } catch (IOException e) {            e.printStackTrace();            return text;        }//        catch (InvalidFormatException e) {//            e.printStackTrace();//            return text;//        }    }//    public static String readFileContentExcel(String path) {//        String text = "";//        // Creating a Workbook from an Excel file (.xls or .xlsx)//        try {//            int flagSkip = 0;//            FileInputStream excelFile = new FileInputStream(new File(path));//            Workbook workbook = new XSSFWorkbook(excelFile);//////            Workbook workbook = WorkbookFactory.create(new File(path));//            System.out.println(String.format("Have %s sheet on this workbook", workbook.getNumberOfSheets()));//            Sheet sheet = null;//            for (int i = 0; i < workbook.getNumberOfSheets(); i++) {//                if (workbook.isSheetHidden(i)) {//                    System.out.println("Hidden sheet is " + i);//                    continue;//                }//                flagSkip += 1;//                System.out.println("Show sheet is " + i);////                if (flagSkip > 2) {//                    sheet = workbook.getSheetAt(i);////                    // Create a DataFormatter to format and get each cell's value as String//                    DataFormatter dataFormatter = new DataFormatter();////                    // 1. You can obtain a rowIterator and columnIterator and iterate over them//                    Iterator<Row> rowIterator = sheet.rowIterator();//                    while (rowIterator.hasNext()) {//                        Row row = rowIterator.next();////                        // Now let's iterate over the columns of the current row//                        Iterator<Cell> cellIterator = row.cellIterator();////                        int flagCell = 0;//                        while (cellIterator.hasNext()) {//                            Cell cell = cellIterator.next();//                            String cellValue = dataFormatter.formatCellValue(cell);//                            if (!cellValue.equals("")) {//                                if (text.equals("")) {//                                    text = cellValue;//                                    flagCell++;//                                } else {//                                    if (flagCell == 0) {//                                        text += cellValue;//                                        flagCell++;//                                    } else {//                                        text = text + ";" + cellValue;//                                        flagCell++;//                                    }//                                }//                            }//                        }//                        text += "/n";//                    }//                    text += "</sheet>";//                }//            }//            // Closing the workbook//            workbook.close();//            return text;//        } catch (IOException e) {//            e.printStackTrace();//            return text;//        }////    }    // Đọc file text    public static List<Map<String, String>> read(String text) {        return readText(text, ",");    }    public static List<Map<String, String>> readText(String text, String listSeparator) {        List<Map<String, String>> result = new ArrayList();        if (!isNullOrEmpty(text)) {            String[] lines = text.split("\\r?\\n");            String[] headers = lines[0].split(listSeparator);            for (int i = 1; i < lines.length; ++i) {                String[] values = lines[i].split(listSeparator);                Map<String, String> entries = new HashMap();                for (int j = 0; j < headers.length && j < values.length; ++j) {                    String header = trim(headers[j]);                    String value = trim(values[j]);                    if (!isNullOrEmpty(value)) {                        if (entries.containsKey(header)) {                            throw new RuntimeException(String.format("Csv data with header = %s in line %s is already existed", header, i));                        }                        entries.put(header, value);                    } else {                        logger.error(String.format("Header = %s in line %s is not enought", header, i));                        System.out.println(String.format("Header = %s in line %s is not enought", header, i));                        entries.put(header, null);                    }                }                if (entries.size() > 0) {                    result.add(entries);                }            }        }        return result;    }    public static String readFileContent(File file) {        String content = null;        if (file.exists() && file.isFile()) {            try {                content = FileUtils.readFileToString(file, "UTF-8");            } catch (Exception e) {                logger.error(e.getMessage(), e);            }        } else {            throw new RuntimeException("File not exist: " + file.getPath());        }        return content;    }    //    ------------------------------Helper------------------------------------------    public static String trim(String value) {        return value != null ? value.trim() : null;    }    public static boolean isNullOrEmpty(String value) {        return value == null ? true : value.trim().isEmpty();    }}