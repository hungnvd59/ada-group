package com.ada.common;import com.ada.model.AffReqPayment;import org.apache.poi.hssf.usermodel.HSSFDateUtil;import org.apache.poi.ss.usermodel.Row;import org.apache.poi.xssf.usermodel.XSSFCell;import org.apache.poi.xssf.usermodel.XSSFRow;import org.apache.poi.xssf.usermodel.XSSFSheet;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import org.springframework.stereotype.Service;import java.io.InputStream;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Iterator;import java.util.List;/** * @author HungNV */@Servicepublic class ReadFileExcel {    private static final SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yyyy h:mm a");    private static final String TYPE_STRING = "String";    private static final String TYPE_DATE = "Date";    private static final String TYPE_LONG = "Long";    private static final String TYPE_DOUBLE = "Double";    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm");    private SimpleDateFormat sdf2 = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");    public List<AffReqPayment> getListFromExcelFilePayment(InputStream ExcelFileToRead, String originalFilename) {        List<AffReqPayment> vResult = new ArrayList<>();        try {            XSSFWorkbook wb = new XSSFWorkbook(ExcelFileToRead);            XSSFSheet sheet = wb.getSheetAt(0);            XSSFRow row;            XSSFCell cell;            Iterator rows = sheet.rowIterator();            int i = 0;            while (rows.hasNext()) {                i++;                row = (XSSFRow) rows.next();                if (i <= 3) {                    continue;                }                AffReqPayment affReqPayment = new AffReqPayment();                for (int idx = 1; idx < 13; idx++) {                    cell = (XSSFCell) row.getCell(idx - 1, Row.MissingCellPolicy.RETURN_BLANK_AS_NULL);                    Object dataCell = null;                    if (cell != null && cell.getCellStyle() != null) {                        if (cell.getCellType() == (XSSFCell.CELL_TYPE_STRING)) {                            dataCell = cell.getStringCellValue();                        } else if (idx == 9) {                            if (HSSFDateUtil.isCellDateFormatted(cell)) {                                dataCell = cell.getDateCellValue();                            }                        } else if (cell.getCellType() == (XSSFCell.CELL_TYPE_NUMERIC)) {                            dataCell = cell.getNumericCellValue();                        }                    }                    try {                        switch (idx) {                            case 1:                                break;                            case 2:                                break;                            case 3:                                String statusStr = (String) getValueObj(dataCell, TYPE_STRING);                                if (statusStr != null && !"".equals(statusStr) && statusStr.trim().toUpperCase().equals(Constants.STATUS_STR_THANH_TOAN_HOAN_TAT)) {                                    affReqPayment.setStatus(Constants.REQUEST_STATUS.DA_DUYET);                                } else if (statusStr != null && !"".equals(statusStr) && statusStr.trim().toUpperCase().equals(Constants.STATUS_STR_THANH_TOAN_TU_CHOI)) {                                    affReqPayment.setStatus(Constants.REQUEST_STATUS.TU_CHOI);                                } else if (statusStr != null && !"".equals(statusStr) && statusStr.trim().toUpperCase().equals(Constants.STATUS_STR_THANH_TOAN_DANG_XU_LY)) {                                    affReqPayment.setStatus(Constants.REQUEST_STATUS.DANG_XU_LY);                                } else {                                    affReqPayment.setStatus(Constants.REQUEST_STATUS.CHO_DUYET);                                }                                break;                            case 4:                                if (getValueObj(dataCell, TYPE_STRING) != null) {                                    affReqPayment.setReqCode((String) getValueObj(dataCell, TYPE_STRING));                                }                                break;                            case 5:                                if (getValueObj(dataCell, TYPE_STRING) != null) {                                    affReqPayment.setCreateBy((String) getValueObj(dataCell, TYPE_STRING));                                }                            case 6:                                if (getValueObj(dataCell, TYPE_STRING) != null) {                                    affReqPayment.setPartnerName((String) getValueObj(dataCell, TYPE_STRING));                                }                                break;                            case 7://                                if (getValueObj(dataCell, TYPE_STRING) != null) {//                                    affReqPayment.setPartnerName((String) getValueObj(dataCell, TYPE_STRING));//                                }                                break;                            case 8:                                if (getValueObj(dataCell, TYPE_STRING) != null) {                                    affReqPayment.setGenDate(sdf.parse(String.valueOf(getValueObj(dataCell, TYPE_STRING))));                                }                                break;                            case 9:                                if (getValueObj(dataCell, TYPE_STRING) != null) {                                    affReqPayment.setApproveDate(sdf.parse(String.valueOf(getValueObj(dataCell, TYPE_STRING))));                                }                                break;                            case 10:                                if (getValueObj(dataCell, TYPE_STRING) != null) {                                    affReqPayment.setPaymentDate(String.valueOf(getValueObj(dataCell, TYPE_STRING)));                                }                                break;                            case 11:                                if (getValueObj(dataCell, TYPE_STRING) != null) {                                    affReqPayment.setDescription((String) getValueObj(dataCell, TYPE_STRING));                                }                                break;                            case 12:                                if (getValueObj(dataCell, TYPE_LONG) != null) {                                    affReqPayment.setPayAmount(Long.valueOf(String.valueOf(getValueObj(dataCell, TYPE_LONG))));                                    affReqPayment.setAmount(Long.valueOf(String.valueOf(getValueObj(dataCell, TYPE_LONG))));                                }                                break;                        }                    } catch (Exception e) {                        System.out.println(e.getMessage() + ":" + dataCell);                        e.printStackTrace();                    }                }//                affReqPayment.setContent(originalFilename);                vResult.add(affReqPayment);                if (i % 5000 == 0) {                    System.out.println("load " + i + " number");                }            }        } catch (Exception e) {            e.printStackTrace();        }        return vResult;    }    private Object getValueObj(Object strCellValue, String dataType) {        try {            if (strCellValue == null || String.valueOf(strCellValue).trim().equals("") || dataType == null && dataType.trim().equals("")) {                return null;            }            if (dataType.trim().equals(TYPE_STRING)) {                return ((String) strCellValue).trim();            } else if (dataType.trim().equals(TYPE_DATE)) {                return strCellValue;            } else if (dataType.trim().equals(TYPE_LONG)) {                if (strCellValue.getClass() == String.class) {                    return Long.valueOf((String) strCellValue);                } else if (strCellValue.getClass() == Double.class) {                    return ((Double) strCellValue).longValue();                }                return (Long) strCellValue;            } else if (dataType.trim().equals(TYPE_DOUBLE)) {                if (strCellValue.getClass() == String.class) {                    return (Double.valueOf(String.valueOf(strCellValue)));                }                return strCellValue;            } else {                return "";            }        } catch (Exception e) {            System.out.println(e.getMessage() + ":" + strCellValue);        }        return null;    }}