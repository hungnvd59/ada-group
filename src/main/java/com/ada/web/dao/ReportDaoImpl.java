package com.ada.web.dao;import com.ada.common.PagingResult;import com.ada.model.view.*;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.stereotype.Repository;import org.springframework.transaction.annotation.Transactional;import javax.persistence.EntityManager;import javax.persistence.PersistenceContext;import javax.persistence.Query;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import java.util.Optional;@Repository@Transactionalpublic class ReportDaoImpl implements ReportDao {    @PersistenceContext(unitName = "appAdmin")    @Qualifier(value = "transactionManager")    private EntityManager entityManager;    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    @Override    public Optional<PagingResult> pageByDay(PagingResult page, String item_type, String item_name, String msisdn_contract, String user_name, Date fromDate, Date toDate) {        int offset = 0;        try {            StringBuilder sqlBuffer = new StringBuilder("SELECT DATE(gen_date) AS genDate,");            sqlBuffer.append(" SUM(trans.amount) as totalAmount, SUM(trans.osp_value) as ospValue, SUM(trans.share_value) as shareValue");            sqlBuffer.append(" FROM  ctvosp.aff_trans trans WHERE 1 = 1");            sqlBuffer.append(" AND trans.STATUS in (3, 6)");            if (!"".equals(item_type) && item_type != null) {                sqlBuffer.append(" AND trans.item_type LIKE :item_type");            }            if (!"".equals(item_name) && item_name != null) {                sqlBuffer.append(" AND trans.item_name LIKE :item_name");            }            if (!"".equals(msisdn_contract) && msisdn_contract != null) {                sqlBuffer.append(" AND trans.msisdn_contact LIKE :msisdn_contact");            }            if (!"".equals(user_name) && user_name != null) {                sqlBuffer.append(" AND trans.user_name LIKE :user_name");            }            if (fromDate != null) {                sqlBuffer.append(" AND trans.gen_date >= :fromDate");            }            if (toDate != null) {                sqlBuffer.append(" AND trans.gen_date <= :toDate");            }            sqlBuffer.append(" GROUP BY genDate ORDER BY genDate DESC");            System.out.println("sql " + sqlBuffer);            StringBuilder sqlCount = new StringBuilder("SELECT COUNT(*) FROM (").append(sqlBuffer).append(") as view");            System.out.println("SQL COUNT: " + sqlCount);            Query queryCount = entityManager.createNativeQuery(sqlCount.toString());            Query queryExcute = entityManager.createNativeQuery(sqlBuffer.toString(), TransByDayView.class);            if (!"".equals(item_type) && item_type != null) {                queryCount.setParameter("item_type", item_type);                queryExcute.setParameter("item_type", item_type);            }            if (!"".equals(item_name) && item_name != null) {                queryCount.setParameter("item_name", item_name);                queryExcute.setParameter("item_name", item_name);            }            if (!"".equals(msisdn_contract) && msisdn_contract != null) {                queryCount.setParameter("msisdn_contact", msisdn_contract);                queryExcute.setParameter("msisdn_contact", msisdn_contract);            }            if (!"".equals(user_name) && user_name != null) {                queryCount.setParameter("user_name", user_name);                queryExcute.setParameter("user_name", user_name);            }            if (fromDate != null) {                queryCount.setParameter("fromDate", fromDate);                queryExcute.setParameter("fromDate", fromDate);            }            if (toDate != null) {                queryCount.setParameter("toDate", toDate);                queryExcute.setParameter("toDate", toDate);            }            int rowCount = Integer.parseInt(queryCount.getSingleResult().toString());            page.setRowCount(rowCount);            if (page.getPageNumber() > 0) {                if (page.getNumberPerPage() != 10000) {                    offset = (page.getPageNumber() - 1) * page.getNumberPerPage();                    queryExcute = queryExcute.setFirstResult(offset).setMaxResults(page.getNumberPerPage());                }            }            List<TransByDayView> result = queryExcute.getResultList();            System.out.println(result);            if (result != null && result.size() > 0) {                page.setItems(result);            }        } catch (Exception e) {            e.printStackTrace();            return null;        } finally {            entityManager.close();        }        return Optional.ofNullable(page);    }    @Override    public Optional<PagingResult> pageByCTV(PagingResult page, String item_type, String item_name, String msisdn_contract, String user_name, Date fromDate, Date toDate) {        int offset = 0;        try {            StringBuilder sqlBuffer = new StringBuilder("SELECT user_name AS msisdn,");            sqlBuffer.append(" SUM(trans.amount) as totalAmount, SUM(trans.osp_value) as ospValue, SUM(trans.share_value) as shareValue");            sqlBuffer.append(" FROM  ctvosp.aff_trans trans WHERE 1 = 1");            sqlBuffer.append(" AND trans.status in (3, 6) ");            if (!"".equals(item_type) && item_type != null) {                sqlBuffer.append(" AND trans.item_type LIKE :item_type");            }            if (!"".equals(item_name) && item_name != null) {                sqlBuffer.append(" AND trans.item_name LIKE :item_name");            }            if (!"".equals(msisdn_contract) && msisdn_contract != null) {                sqlBuffer.append(" AND trans.msisdn_contact LIKE :msisdn_contact");            }            if (!"".equals(user_name) && user_name != null) {                sqlBuffer.append(" AND trans.user_name LIKE :user_name");            }            if (fromDate != null) {                sqlBuffer.append(" AND trans.gen_date >= :fromDate");            }            if (toDate != null) {                sqlBuffer.append(" AND trans.gen_date <= :toDate");            }            sqlBuffer.append(" GROUP BY msisdn");            System.out.println("sql " + sqlBuffer);            StringBuilder sqlCount = new StringBuilder("SELECT COUNT(*) FROM (").append(sqlBuffer).append(") as view");            System.out.println("SQL COUNT: " + sqlCount);            Query queryCount = entityManager.createNativeQuery(sqlCount.toString());            sqlBuffer.append(" order by totalAmount desc ");            Query queryExcute = entityManager.createNativeQuery(sqlBuffer.toString(), TransByCTVView.class);            if (!"".equals(item_type) && item_type != null) {                queryCount.setParameter("item_type", item_type);                queryExcute.setParameter("item_type", item_type);            }            if (!"".equals(item_name) && item_name != null) {                queryCount.setParameter("item_name", item_name);                queryExcute.setParameter("item_name", item_name);            }            if (!"".equals(msisdn_contract) && msisdn_contract != null) {                queryCount.setParameter("msisdn_contact", msisdn_contract);                queryExcute.setParameter("msisdn_contact", msisdn_contract);            }            if (!"".equals(user_name) && user_name != null) {                queryCount.setParameter("user_name", user_name);                queryExcute.setParameter("user_name", user_name);            }            if (fromDate != null) {                queryCount.setParameter("fromDate", fromDate);                queryExcute.setParameter("fromDate", fromDate);            }            if (toDate != null) {                queryCount.setParameter("toDate", toDate);                queryExcute.setParameter("toDate", toDate);            }            int rowCount = Integer.parseInt(queryCount.getSingleResult().toString());            page.setRowCount(rowCount);            if (page.getPageNumber() > 0) {                if (page.getNumberPerPage() != 10000) {                    offset = (page.getPageNumber() - 1) * page.getNumberPerPage();                    queryExcute = queryExcute.setFirstResult(offset).setMaxResults(page.getNumberPerPage());                }            }            List<TransByCTVView> result = queryExcute.getResultList();            System.out.println(result);            if (result != null && result.size() > 0) {                page.setItems(result);            }        } catch (Exception e) {            e.printStackTrace();            return null;        } finally {            entityManager.close();        }        return Optional.ofNullable(page);    }    @Override    public Optional<PagingResult> pageByDivu(PagingResult page, String item_type, String msisdn_contract, String user_name, Date fromDate, Date toDate) {        int offset = 0;        try {            StringBuilder sqlBuffer = new StringBuilder("SELECT item_type AS itemName,");            sqlBuffer.append(" SUM(trans.amount) as totalAmount, SUM(trans.osp_value) as ospValue, SUM(trans.share_value) as shareValue");            sqlBuffer.append(" FROM  ctvosp.aff_trans trans WHERE 1 = 1 and trans.status in (3, 6) ");            if (!"".equals(item_type) && item_type != null) {                sqlBuffer.append(" AND trans.item_type LIKE :item_type");            }            if (!"".equals(msisdn_contract) && msisdn_contract != null) {                sqlBuffer.append(" AND trans.msisdn_contact LIKE :msisdn_contact");            }            if (!"".equals(user_name) && user_name != null) {                sqlBuffer.append(" AND trans.user_name LIKE :user_name");            }            if (fromDate != null) {                sqlBuffer.append(" AND trans.gen_date >= :fromDate");            }            if (toDate != null) {                sqlBuffer.append(" AND trans.gen_date <= :toDate");            }            sqlBuffer.append(" GROUP BY itemName");            System.out.println("sql " + sqlBuffer);            StringBuilder sqlCount = new StringBuilder("SELECT COUNT(*) FROM (").append(sqlBuffer).append(") as view");            System.out.println("SQL COUNT: " + sqlCount);            Query queryCount = entityManager.createNativeQuery(sqlCount.toString());            Query queryExcute = entityManager.createNativeQuery(sqlBuffer.toString(), TransByDivuView.class);            if (!"".equals(item_type) && item_type != null) {                queryCount.setParameter("item_type", item_type);                queryExcute.setParameter("item_type", item_type);            }            if (!"".equals(msisdn_contract) && msisdn_contract != null) {                queryCount.setParameter("msisdn_contact", msisdn_contract);                queryExcute.setParameter("msisdn_contact", msisdn_contract);            }            if (!"".equals(user_name) && user_name != null) {                queryCount.setParameter("user_name", user_name);                queryExcute.setParameter("user_name", user_name);            }            if (fromDate != null) {                queryCount.setParameter("fromDate", fromDate);                queryExcute.setParameter("fromDate", fromDate);            }            if (toDate != null) {                queryCount.setParameter("toDate", toDate);                queryExcute.setParameter("toDate", toDate);            }            int rowCount = Integer.parseInt(queryCount.getSingleResult().toString());            page.setRowCount(rowCount);            if (page.getPageNumber() > 0) {                if (page.getNumberPerPage() != 10000) {                    offset = (page.getPageNumber() - 1) * page.getNumberPerPage();                    queryExcute = queryExcute.setFirstResult(offset).setMaxResults(page.getNumberPerPage());                }            }            List<TransByDivuView> result = queryExcute.getResultList();            System.out.println(result);            if (result != null && result.size() > 0) {                page.setItems(result);            }        } catch (Exception e) {            e.printStackTrace();            return null;        } finally {            entityManager.close();        }        return Optional.ofNullable(page);    }    @Override    public Optional<PagingResult> pageCtv(PagingResult page, Date fromDate, Date toDate) {        int offset = 0;        try {            StringBuilder sqlBuffer = new StringBuilder("SELECT DATE(gen_date) AS genDate");            sqlBuffer.append(" FROM ctvosp.aff_partner p WHERE 1 = 1");            if (fromDate != null) {                sqlBuffer.append(" AND p.gen_date >= :fromDate");            }            if (toDate != null) {                sqlBuffer.append(" AND p.gen_date <= :toDate");            }            sqlBuffer.append(" GROUP BY genDate ORDER BY genDate DESC");            System.out.println("sql " + sqlBuffer);            StringBuilder sqlCount = new StringBuilder("SELECT COUNT(*) FROM (").append(sqlBuffer).append(") as view");            System.out.println("SQL COUNT: " + sqlCount);            Query queryCount = entityManager.createNativeQuery(sqlCount.toString());            Query queryExcute = entityManager.createNativeQuery(sqlBuffer.toString(), ReportPartnerView.class);            if (fromDate != null) {                queryCount.setParameter("fromDate", fromDate);                queryExcute.setParameter("fromDate", fromDate);            }            if (toDate != null) {                queryCount.setParameter("toDate", toDate);                queryExcute.setParameter("toDate", toDate);            }            int rowCount = Integer.parseInt(queryCount.getSingleResult().toString());            page.setRowCount(rowCount);            if (page.getPageNumber() > 0) {                if (page.getNumberPerPage() != 10000) {                    offset = (page.getPageNumber() - 1) * page.getNumberPerPage();                    queryExcute = queryExcute.setFirstResult(offset).setMaxResults(page.getNumberPerPage());                }            }            List<ReportPartnerView> result = queryExcute.getResultList();            System.out.println(result);            if (result != null && result.size() > 0) {                page.setItems(result);            }        } catch (Exception e) {            e.printStackTrace();            return null;        } finally {            entityManager.close();        }        return Optional.ofNullable(page);    }    @Override    public List<TransByDayView> getCountByDay(List<TransByDayView> transByDayViews, String item_type, String item_name, String msisdn_contract, String user_name) {        StringBuilder sqlCountByDay = new StringBuilder();        sqlCountByDay.append("SELECT COUNT(*) FROM ctvosp.aff_trans where status in (3, 6) and DATE_FORMAT(gen_date, '%Y-%m-%d') =:genDate ");        if (!"".equals(item_type) && item_type != null) {            sqlCountByDay.append(" AND item_type LIKE :item_type");        }        if (!"".equals(item_name) && item_name != null) {            sqlCountByDay.append(" AND item_name LIKE :item_name");        }        if (!"".equals(msisdn_contract) && msisdn_contract != null) {            sqlCountByDay.append(" AND msisdn_contact LIKE :msisdn_contact");        }        if (!"".equals(user_name) && user_name != null) {            sqlCountByDay.append(" AND user_name LIKE :user_name");        }        if (transByDayViews != null && transByDayViews.size() > 0) {            for (int i = 0; i < transByDayViews.size(); i++) {                Query queryCount = entityManager.createNativeQuery(sqlCountByDay.toString());                queryCount.setParameter("genDate", transByDayViews.get(i).getGenDate());                if (!"".equals(item_type) && item_type != null) {                    queryCount.setParameter("item_type", item_type);                }                if (!"".equals(item_name) && item_name != null) {                    queryCount.setParameter("item_name", item_name);                }                if (!"".equals(msisdn_contract) && msisdn_contract != null) {                    queryCount.setParameter("msisdn_contact", msisdn_contract);                }                if (!"".equals(user_name) && user_name != null) {                    queryCount.setParameter("user_name", user_name);                }                int rowCount = Integer.parseInt(queryCount.getSingleResult().toString());                transByDayViews.get(i).setTotalTransSuccess(rowCount);            }        }        return transByDayViews;    }    @Override    public List<TransByCTVView> getCountByCTV(List<TransByCTVView> transByCTVViews, String item_type, String item_name, String msisdn_contract, String user_name, Date fromDate, Date toDate) {        StringBuilder sqlCountByCtv = new StringBuilder();        sqlCountByCtv.append("SELECT COUNT(*) FROM ctvosp.aff_trans where status in (3, 6) and user_name =:msisdn");        if (!"".equals(item_type) && item_type != null) {            sqlCountByCtv.append(" AND item_type LIKE :item_type");        }        if (!"".equals(item_name) && item_name != null) {            sqlCountByCtv.append(" AND item_name LIKE :item_name");        }        if (!"".equals(msisdn_contract) && msisdn_contract != null) {            sqlCountByCtv.append(" AND msisdn_contact LIKE :msisdn_contact");        }        if (!"".equals(user_name) && user_name != null) {            sqlCountByCtv.append(" AND user_name LIKE :user_name");        }        if (fromDate != null && !fromDate.equals("")) {            sqlCountByCtv.append(" AND gen_date >= :fromDate");        }        if (toDate != null && !toDate.equals("")) {            sqlCountByCtv.append(" AND gen_date <= :toDate");        }        if (transByCTVViews != null && transByCTVViews.size() > 0) {            for (int i = 0; i < transByCTVViews.size(); i++) {                Query queryCount = entityManager.createNativeQuery(sqlCountByCtv.toString());                queryCount.setParameter("msisdn", transByCTVViews.get(i).getMsisdn());                if (!"".equals(item_type) && item_type != null) {                    queryCount.setParameter("item_type", item_type);                }                if (!"".equals(item_name) && item_name != null) {                    queryCount.setParameter("item_name", item_name);                }                if (!"".equals(msisdn_contract) && msisdn_contract != null) {                    queryCount.setParameter("msisdn_contact", msisdn_contract);                }                if (!"".equals(user_name) && user_name != null) {                    queryCount.setParameter("user_name", user_name);                }                if (fromDate != null && !"".equals(fromDate)) {                    queryCount.setParameter("fromDate", fromDate);                }                if (toDate != null && !"".equals(toDate)) {                    queryCount.setParameter("toDate", toDate);                }                int rowCount = Integer.parseInt(queryCount.getSingleResult().toString());                transByCTVViews.get(i).setTotalTransSuccess(rowCount);            }        }        return transByCTVViews;    }    @Override    public List<TransByDivuView> getCountByDivu(List<TransByDivuView> transByDivuViews, String item_type, String msisdn_contract, String user_name, Date fromDate, Date toDate) {        StringBuilder sqlCountByDivu = new StringBuilder();        sqlCountByDivu.append("SELECT COUNT(*) FROM ctvosp.aff_trans where status in (3, 6) and item_type =:type");        if (item_type != null && !"".equals(item_type)) {            sqlCountByDivu.append(" AND item_type LIKE :item_type");        }        if (msisdn_contract != null && !"".equals(msisdn_contract)) {            sqlCountByDivu.append(" AND msisdn_contact LIKE :msisdn_contact");        }        if (user_name != null && !"".equals(user_name)) {            sqlCountByDivu.append(" AND user_name LIKE :user_name");        }        if (fromDate != null) {            sqlCountByDivu.append(" AND gen_date >= :fromDate");        }        if (toDate != null) {            sqlCountByDivu.append(" AND gen_date <= :toDate");        }        if (transByDivuViews != null && transByDivuViews.size() > 0) {            for (int i = 0; i < transByDivuViews.size(); i++) {                Query queryCount = entityManager.createNativeQuery(sqlCountByDivu.toString());                queryCount.setParameter("type", transByDivuViews.get(i).getItemName());                if (item_type != null && !"".equals(item_type)) {                    queryCount.setParameter("item_type", item_type);                }                if (msisdn_contract != null && !"".equals(msisdn_contract)) {                    queryCount.setParameter("msisdn_contact", msisdn_contract);                }                if (user_name != null && !"".equals(user_name)) {                    queryCount.setParameter("user_name", user_name);                }                if (fromDate != null) {                    queryCount.setParameter("fromDate", fromDate);                }                if (toDate != null) {                    queryCount.setParameter("toDate", toDate);                }                int rowCount = Integer.parseInt(queryCount.getSingleResult().toString());                transByDivuViews.get(i).setTotalTransSuccess(rowCount);            }        }        return transByDivuViews;    }    @Override    public List<ReportPartnerView> getCountCtv(List<ReportPartnerView> reportCtvViews) {        StringBuilder sqlReportPartnerResDay = new StringBuilder();        StringBuilder sqlTotalCount = new StringBuilder();        sqlReportPartnerResDay.append("SELECT COUNT(*) FROM ctvosp.aff_partner where DATE(gen_date) = DATE(:genDate) and status in (0,1)");        sqlTotalCount.append("SELECT COUNT(*) FROM ctvosp.aff_partner WHERE DATE(gen_date) <= DATE(:genDate) and status in (0,1)");        System.out.println("sqlTotalCount" + sqlReportPartnerResDay);        System.out.println("sqlTotalCount" + sqlTotalCount);        if (reportCtvViews != null && reportCtvViews.size() > 0) {            for (int i = 0; i < reportCtvViews.size(); i++) {                Query queryCount = entityManager.createNativeQuery(sqlReportPartnerResDay.toString());                Query query = entityManager.createNativeQuery(sqlTotalCount.toString());                queryCount.setParameter("genDate", reportCtvViews.get(i).getGenDate());                query.setParameter("genDate", reportCtvViews.get(i).getGenDate());                int partnerNew = Integer.parseInt(queryCount.getSingleResult().toString());                int total = Integer.parseInt(query.getSingleResult().toString());                reportCtvViews.get(i).setPartnerResDay(partnerNew);                reportCtvViews.get(i).setTotalPartner(total);            }        }        return reportCtvViews;    }    @Override    public Long getTotalPartner(String fromDate, String toDate) {        try {            StringBuilder sql = new StringBuilder("SELECT COUNT(*) FROM ctvosp.aff_partner partner WHERE partner.STATUS IN (0, 1) ");            if (fromDate != null && !fromDate.equals("")) {                sql.append(" AND partner.gen_date >= STR_TO_DATE(:fromDate,'%d/%m/%Y')");            }            if (toDate != null && !toDate.equals("")) {                sql.append(" AND partner.gen_date <= STR_TO_DATE(:toDate,'%d/%m/%Y')");            }            Query query = entityManager.createNativeQuery(sql.toString());            if (!"".equals(fromDate) && fromDate != null) {                query.setParameter("fromDate", fromDate);            }            if (!"".equals(toDate) && toDate != null) {                query.setParameter("toDate", toDate);            }            Long result = Long.valueOf(query.getSingleResult().toString());            return result;        } catch (Exception e) {            e.printStackTrace();            return 0L;        } finally {            entityManager.close();        }    }    @Override    public List<ServiceNameView> listDivu(String itemType) {        try {            StringBuilder sql = new StringBuilder("SELECT item_name FROM aff_trans WHERE 1 = 1 AND item_type LIKE :itemType GROUP BY item_name");            Query query = entityManager.createNativeQuery(sql.toString(), ServiceNameView.class);            query.setParameter("itemType", itemType);            List<ServiceNameView> result = query.getResultList();            return result;        } catch (Exception e) {            e.printStackTrace();            return null;        } finally {            entityManager.close();        }    }}