package com.ada.web.dao;import com.ada.common.PagingResult;import com.ada.model.AffConfigContract;import com.ada.model.view.AffConfigContractView;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.stereotype.Repository;import org.springframework.transaction.annotation.Transactional;import javax.persistence.EntityManager;import javax.persistence.PersistenceContext;import javax.persistence.Query;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Optional;@Repository@Transactional(value = "transactionManager")public class AffConfigContractDaoImpl implements AffConfigContractDao {    @PersistenceContext(unitName = "appAdmin")    @Qualifier(value = "transactionManager")    private EntityManager em;    private Logger logger = LogManager.getLogger(AffConfigContractDaoImpl.class);    @Override    public Optional<PagingResult> page(PagingResult page, String name, String mobilePartner, Long status, String fromDate, String toDate) {        int offset = 0;        try {            StringBuilder sqlCount = new StringBuilder("SELECT COUNT(*) FROM ctvosp.aff_config_contract config ");            StringBuilder sqlBuffer = new StringBuilder("SELECT config.id, " +                    "config.name, " +                    "config.description, " +                    "config.status, " +                    "config.m_bl_pre_bonus, " +                    "config.m_bl_pre_osp, " +                    "config.m_bl_pre_ctv, " +                    "config.m_bl_pre_ref, " +                    "config.m_bl_post_bonus, " +                    "config.m_bl_post_osp, " +                    "config.m_bl_post_ctv, " +                    "config.m_bl_post_ref, " +                    "config.m_package_bonus, " +                    "config.m_package_osp, " +                    "config.m_package_ctv, " +                    "config.m_package_ref, " +                    "config.gen_date, " +                    "config.last_updated, " +                    "config.create_by, " +                    "config.update_by, " +                    "config.vnp_package_osp, " +                    "config.vnp_package_ctv, " +                    "config.vnp_package_ref, " +                    "config.vnp_bl_pre_bonus, " +                    "config.vnp_bl_pre_osp, " +                    "config.vnp_bl_pre_ctv, " +                    "config.vnp_bl_pre_ref " +                    " FROM ctvosp.aff_config_contract config");            StringBuilder sqlCondition = new StringBuilder();            if (!"".equals(mobilePartner) && mobilePartner != null) {                sqlCondition.append(" JOIN ctvosp.aff_partner partner ON config.id = partner.CONFIG_ID");            }            sqlCondition.append(" WHERE config.status IN (0,1)");            if (!"".equals(name) && name != null) {                sqlCondition.append(" AND config.name LIKE :name");            }            if (!"".equals(mobilePartner) && mobilePartner != null) {                sqlCondition.append(" AND partner.MOBILE =:mobilePartner");            }            if (status != null && status != -1) {                sqlCondition.append(" AND config.status=:status");            }            if (fromDate != null && !fromDate.equals("")) {                sqlCondition.append(" AND config.gen_date >= STR_TO_DATE(:fromDate,'%d/%m/%Y')");            }            if (toDate != null && !toDate.equals("")) {                sqlCondition.append(" AND config.gen_date <= STR_TO_DATE(:toDate,'%d/%m/%Y')");            }            sqlCondition.append(" ORDER BY CASE WHEN config.id = 1 THEN config.id END DESC, CASE WHEN config.id > 1 THEN config.last_updated END DESC");            Query queryCount = em.createNativeQuery(sqlCount.toString() + sqlCondition.toString());            Query queryExcute = em.createNativeQuery(sqlBuffer.toString() + sqlCondition.toString(), AffConfigContract.class);            System.out.println("SQL: " + sqlBuffer.toString() + sqlCondition.toString());            if (!"".equals(name) && name != null) {                queryExcute.setParameter("name", "%" + name + "%");                queryCount.setParameter("name", "%" + name + "%");            }            if (!"".equals(mobilePartner) && mobilePartner != null) {                queryExcute.setParameter("mobilePartner", mobilePartner);                queryCount.setParameter("mobilePartner", mobilePartner);            }            if (status != null && status != -1) {                queryExcute.setParameter("status", status);                queryCount.setParameter("status", status);            }            if (!"".equals(fromDate) && fromDate != null) {                queryExcute.setParameter("fromDate", fromDate);                queryCount.setParameter("fromDate", fromDate);            }            if (!"".equals(toDate) && toDate != null) {                queryExcute.setParameter("toDate", toDate);                queryCount.setParameter("toDate", toDate);            }            int rowCount = Integer.parseInt(queryCount.getSingleResult().toString());            page.setRowCount(rowCount);            if (page.getPageNumber() > 0) {                if (page.getNumberPerPage() != 1000) {                    offset = (page.getPageNumber() - 1) * page.getNumberPerPage();                    queryExcute = queryExcute.setFirstResult(offset).setMaxResults(page.getNumberPerPage());                }            }            List<AffConfigContract> result = queryExcute.getResultList();            if (result != null && result.size() > 0) {                page.setItems(result);            }        } catch (Exception e) {            e.printStackTrace();            return null;        } finally {            em.close();        }        return Optional.ofNullable(page);    }    @Override    @Transactional(rollbackFor = {Exception.class})    public Long add(AffConfigContract affConfigContract) {        try {            em.persist(affConfigContract);            em.flush();            return affConfigContract.getId();        } catch (Exception e) {            e.printStackTrace();            return null;        } finally {            em.close();        }    }    @Override    public Boolean edit(AffConfigContract affConfigContract) {        try {            em.merge(affConfigContract);            em.flush();            return true;        } catch (Exception e) {            e.printStackTrace();            return false;        } finally {            em.close();        }    }    @Override    public AffConfigContract getDetail(Long id) {        AffConfigContract result = new AffConfigContract();        try {            result = em.find(AffConfigContract.class, id);        } catch (Exception e) {            e.printStackTrace();        } finally {            em.close();        }        return result;    }    @Override    public Optional<PagingResult> getPartnerConfig(PagingResult page, String mobilePartner, String fromDate, String toDate, String nameConfig) {        int offset = 0;        try {            StringBuilder sqlCount = new StringBuilder("SELECT COUNT(*) FROM ctvosp.aff_config_contract config");            StringBuilder sqlBuffer = new StringBuilder("SELECT p.MOBILE, config.name, p.CONFIG_ID,p.ID , p.GEN_DATE FROM ctvosp.aff_config_contract config");            sqlCount.append(" JOIN ctvosp.aff_partner p ON config.id = p.CONFIG_ID");            sqlBuffer.append(" JOIN ctvosp.aff_partner p ON config.id = p.CONFIG_ID");            sqlBuffer.append(" WHERE 1 = 1");            if (!"".equals(mobilePartner) && mobilePartner != null) {                sqlCount.append(" AND p.MOBILE LIKE :mobilePartner");                sqlBuffer.append(" AND p.MOBILE LIKE :mobilePartner");            }            if (!"".equals(nameConfig) && nameConfig != null) {                sqlCount.append(" AND config.name LIKE :nameConfig");                sqlBuffer.append(" AND config.name LIKE :nameConfig");            }            if (fromDate != null && !fromDate.equals("")) {                sqlCount.append(" AND p.GEN_DATE >= STR_TO_DATE('" + fromDate + "','%d/%m/%Y')");                sqlBuffer.append(" AND p.GEN_DATE >= STR_TO_DATE('" + fromDate + "','%d/%m/%Y')");            }            if (toDate != null && !toDate.equals("")) {                sqlCount.append(" AND p.GEN_DATE <= STR_TO_DATE('" + toDate + "','%d/%m/%Y')");                sqlBuffer.append(" AND p.GEN_DATE <= STR_TO_DATE('" + toDate + "','%d/%m/%Y')");            }            sqlBuffer.append(" ORDER BY config.id ASC");            Query queryCount = em.createNativeQuery(sqlCount.toString());            Query queryExcute = em.createNativeQuery(sqlBuffer.toString(), AffConfigContractView.class);            if (!"".equals(mobilePartner) && mobilePartner != null) {                queryExcute.setParameter("mobilePartner", "%" + mobilePartner + "%");                queryCount.setParameter("mobilePartner", "%" + mobilePartner + "%");            }            if (!"".equals(nameConfig) && nameConfig != null) {                queryExcute.setParameter("nameConfig", "%" + nameConfig + "%");                queryCount.setParameter("nameConfig", "%" + nameConfig + "%");            }            int rowCount = Integer.parseInt(queryCount.getSingleResult().toString());            page.setRowCount(rowCount);            if (page.getPageNumber() > 0) {                if (page.getNumberPerPage() != 1000) {                    offset = (page.getPageNumber() - 1) * page.getNumberPerPage();                    queryExcute = queryExcute.setFirstResult(offset).setMaxResults(page.getNumberPerPage());                }            }            List<AffConfigContractView> result = queryExcute.getResultList();            if (result != null && result.size() > 0) {                page.setItems(result);            }        } catch (Exception e) {            e.printStackTrace();            return null;        } finally {            em.close();        }        return Optional.ofNullable(page);    }    @Override    public List<HashMap<String, String>> getNameConfig(String mobilePartner) {        List<AffConfigContract> affConfigContractListResult = new ArrayList<>();        List<HashMap<String, String>> listResult = new ArrayList<>();        try {            StringBuilder sqlBuffer = new StringBuilder("SELECT * FROM ctvosp.aff_config_contract config WHERE config.status IN (0,1)");            Query queryExcute = em.createNativeQuery(sqlBuffer.toString(), AffConfigContract.class);            affConfigContractListResult = (List<AffConfigContract>) queryExcute.getResultList();            for (int i = 0; i < affConfigContractListResult.size(); i++) {                int count = getCountByName(affConfigContractListResult.get(i).getName(), mobilePartner);                HashMap<String, String> resultObj = new HashMap<>();                resultObj.put("configId", String.valueOf(affConfigContractListResult.get(i).getId()));                resultObj.put("name", affConfigContractListResult.get(i).getName());                resultObj.put("count", String.valueOf(count));                listResult.add(resultObj);            }        } catch (Exception e) {            e.printStackTrace();            return null;        } finally {            em.close();        }        return listResult;    }    @Override    public AffConfigContract getByName(String name) {        List<AffConfigContract> affConfigContracts = new ArrayList<>();        try {            StringBuilder sqlBuffer = new StringBuilder("SELECT * FROM ctvosp.aff_config_contract config WHERE config.name LIKE :name");            Query queryExcute = em.createNativeQuery(sqlBuffer.toString(), AffConfigContract.class);            queryExcute.setParameter("name", name);            affConfigContracts = (List<AffConfigContract>) queryExcute.getResultList();            if (affConfigContracts == null || affConfigContracts.size() == 0) return null;        } catch (Exception e) {            e.printStackTrace();        } finally {            em.close();        }        return affConfigContracts.get(0);    }    private int getCountByName(String nameConfig, String mobilePartner) {        int count = 0;        try {            if (nameConfig != null && !nameConfig.equals("")) {                StringBuilder sqlBuffer = new StringBuilder("SELECT COUNT(*) FROM (");                sqlBuffer.append(" SELECT config.name FROM ctvosp.aff_config_contract config");                sqlBuffer.append(" JOIN ctvosp.aff_partner p ON config.id = p.CONFIG_ID");                if (mobilePartner != null && !mobilePartner.equals("")) {                    sqlBuffer.append(" WHERE p.MOBILE = '" + mobilePartner + "'");                }                sqlBuffer.append(" ) AS a");                sqlBuffer.append(" WHERE a.name LIKE '" + nameConfig + "'");                Query queryExcute = em.createNativeQuery(sqlBuffer.toString());                count = Integer.parseInt(queryExcute.getSingleResult().toString());            }        } catch (Exception e) {            e.printStackTrace();            return 0;        } finally {            em.close();        }        return count;    }}