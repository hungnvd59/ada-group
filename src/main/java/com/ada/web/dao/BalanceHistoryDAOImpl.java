package com.ada.web.dao;import com.ada.common.PagingResult;import com.ada.model.view.AffLogsAddBonusView;import org.springframework.beans.factory.annotation.Qualifier;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;import javax.persistence.EntityManager;import javax.persistence.PersistenceContext;import javax.persistence.Query;import java.util.List;import java.util.Optional;@Service@Transactionalpublic class BalanceHistoryDAOImpl implements BalanceHistoryDAO {    @PersistenceContext(unitName = "appAdmin")    @Qualifier(value = "transactionManager")    private EntityManager entityManager;    @Override    public Long getBalanceWithdraw(String username) {        Long totalBalanceWithdraw = 0L;        try {            Query query = entityManager.createNativeQuery(" select sum(log.amount) as totalBalanceWithdraw from aff_log_add_bonus log where log.user_name = :username and log.trans_type = 3 and log.status = 1");            query.setParameter("username", username);            Object result = query.getSingleResult();            if (result != null) {                totalBalanceWithdraw = Long.valueOf(result.toString());            }        } catch (Exception e) {            e.printStackTrace();        } finally {            entityManager.close();        }        return -totalBalanceWithdraw;    }    @Override    public Optional<PagingResult> page(PagingResult page, String username, String itemName, Long transType, String fromGenDate, String toGenDate) {        int offset = 0;        StringBuilder sql = new StringBuilder("SELECT * FROM ");        StringBuilder sqlCount = new StringBuilder("SELECT COUNT(*) FROM ");        StringBuilder orderBy = new StringBuilder(" AS history ORDER BY history.gen_date DESC");        StringBuilder sqlUnion = new StringBuilder(" UNION ALL ");        try {            /*------------------aff_log_add_bonus----------------------*/            StringBuilder sql1 = new StringBuilder("(SELECT lab.user_name, lab.trans_code AS id, lab.trans_type, lab.amount,  lab.current_amount,t.msisdn_contact,");            sql1.append(" lab.status, lab.level AS levels, lab.description,t.share_type,t.item_name,");            sql1.append(" NULL AS acc_number, NULL AS acc_branch, NULL AS acc_name, NULL AS acc_bank, lab.gen_date");            sql1.append(" FROM aff_log_add_bonus lab");            sql1.append(" INNER JOIN aff_partner p ON lab.user_name = p.username");            sql1.append(" INNER JOIN aff_trans t ON t.trans_code =lab.trans_code WHERE 1 = 1");            sql1.append(" AND lab.user_name ='" + username + "'");            sql1.append(" AND lab.status =1");            if (transType != null && transType != -1L) {                sql1.append(" AND lab.trans_type = :transType");            }            if (itemName != null && !"".equals(itemName)) {                sql1.append(" AND t.msisdn_contact LIKE :itemName");                sql1.append(" OR t.item_name LIKE :itemName");            }            if (fromGenDate != null && !"".equals(fromGenDate)) {                sql1.append(" AND lab.gen_date >= STR_TO_DATE(:fromGenDate,'%d/%m/%Y')");            }            if (toGenDate != null && !"".equals(toGenDate)) {                sql1.append(" AND lab.gen_date <= STR_TO_DATE(:toGenDate,'%d/%m/%Y')");            }            /*------------------aff_log_add_bonus----------------------*/            StringBuilder sql2 = new StringBuilder("SELECT p.username, rp.req_code AS id, '3' AS trans_type, rp.amount,lab.current_amount,'' AS msisdn_contact,");            sql2.append(" lab.status, '3' AS levels, rp.description, '3' AS share_type, 'Yêu cầu thanh toán' AS item_name,");            sql2.append(" rp.acc_number, rp.acc_branch, rp.acc_name, rp.acc_bank, lab.gen_date");            sql2.append(" FROM aff_req_payment rp");            sql2.append(" INNER JOIN aff_partner p ON rp.partner_id = p.id");            sql2.append(" INNER JOIN aff_log_add_bonus lab ON lab.trans_code = rp.req_code");            sql2.append("  WHERE 1=1 AND p.username = '" + username + "'");            sql2.append(" AND lab.status = 1");            if (transType != null && transType != -1L) {                sql2.append(" AND lab.trans_type = :transType");            }            if (itemName != null && !"".equals(itemName)) {                sql2.append(" AND 1 = 2");            }            if (fromGenDate != null && !"".equals(fromGenDate)) {                sql2.append(" AND lab.gen_date >= STR_TO_DATE(:fromGenDate,'%d/%m/%Y')");            }            if (toGenDate != null && !"".equals(toGenDate)) {                sql2.append(" AND lab.gen_date <= STR_TO_DATE(:toGenDate,'%d/%m/%Y')");            }            StringBuilder sql3 = new StringBuilder("SELECT\n" +                    "    lab.user_name,\n" +                    "     ROW_NUMBER() OVER(PARTITION BY lab.user_name) AS id,\n" +                    "    lab.trans_type,\n" +                    "    lab.amount,\n" +                    "    lab.current_amount,\n" +                    "    '' AS msisdn_contact,\n" +                    "    lab.status,\n" +                    "    lab.level,\n" +                    "    lab.description,\n" +                    "    '' AS share_type,\n" +                    "    '' AS item_name,\n" +                    "    '' AS acc_number,\n" +                    "    '' AS acc_branch,\n" +                    "    '' AS acc_name,\n" +                    "    '' AS acc_bank,\n" +                    "    lab.gen_date\n" +                    "  FROM\n" +                    "    aff_log_add_bonus lab\n" +                    "  WHERE lab.trans_type IN (4, 5, 6)\n" +                    "    AND lab.user_name = '" + username + "'");            if (fromGenDate.equals(toGenDate)){            }            if (fromGenDate != null && !"".equals(fromGenDate)) {                sql3.append(" AND lab.gen_date >= STR_TO_DATE(:fromGenDate,'%d/%m/%Y')");            }            if (toGenDate != null && !"".equals(toGenDate)) {                sql3.append(" AND lab.gen_date <= STR_TO_DATE(:toGenDate,'%d/%m/%Y')");            }            sql3.append(")");            /*------------------aff_log_add_bonus----------------------*/            Query query = entityManager.createNativeQuery(sql.append(sql1).append(sqlUnion).append(sql2).append(sqlUnion).append(sql3).append(orderBy).toString(), AffLogsAddBonusView.class);            Query queryCount = entityManager.createNativeQuery(sqlCount.append(sql1).append(sqlUnion).append(sql2).append(sqlUnion).append(sql3).append(orderBy).toString());            System.out.println("SQLL: " + sql.append(sql1).append(sqlUnion).append(sql2).append(sqlUnion).append(sql3).append(orderBy).toString());            if (itemName != null && !"".equals(itemName)) {                query.setParameter("itemName", "%" + itemName + "%");                queryCount.setParameter("itemName", "%" + itemName + "%");            }            if (transType != null && transType != -1L) {                query.setParameter("transType", transType);                queryCount.setParameter("transType", transType);            }            if (fromGenDate != null && !"".equals(fromGenDate)) {                query.setParameter("fromGenDate", fromGenDate);                queryCount.setParameter("fromGenDate", fromGenDate);            }            if (toGenDate != null && !"".equals(toGenDate)) {                query.setParameter("toGenDate", toGenDate);                queryCount.setParameter("toGenDate", toGenDate);            }            int rowCount = Integer.parseInt(queryCount.getSingleResult().toString());            page.setRowCount(rowCount);            if (page.getPageNumber() > 0) {                if (page.getNumberPerPage() != 10000) {                    offset = (page.getPageNumber() - 1) * page.getNumberPerPage();                    query = query.setFirstResult(offset).setMaxResults(page.getNumberPerPage());                }            }            List<AffLogsAddBonusView> result = (List<AffLogsAddBonusView>) query.getResultList();            if (result != null) {                page.setItems(result);            }        } catch (Exception e) {            e.printStackTrace();        } finally {            entityManager.close();        }        return Optional.ofNullable(page);    }}