package com.ada.web.controller;import com.ada.common.Constants;import com.ada.common.PagingResult;import com.ada.model.AffConfigContract;import com.ada.model.view.AffConfigContractView;import com.ada.model.view.ChangeConfigContractView;import com.ada.web.dao.AffConfigContractDao;import com.ada.web.dao.PartnerDao;import com.ada.web.service.AffConfigContractService;import com.ada.web.service.PartnerService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.*;import java.util.Date;import java.util.HashMap;import java.util.List;@Controller@RequestMapping("/config-contract")public class AffConfigContractController {    @Autowired    AffConfigContractDao affConfigContractDao;    @Autowired    AffConfigContractService affConfigContractService;    @Autowired    PartnerService partnerService;    @Autowired    PartnerDao partnerDao;    @RequestMapping(value = "/index.html", method = RequestMethod.GET)    public String list() {        return "config-contract.list";    }    @RequestMapping(value = "/add.html", method = RequestMethod.GET)    public String add() {        return "config-contract.add";    }    @GetMapping("/search")    public ResponseEntity<PagingResult> search(@RequestParam(value = "p", required = false, defaultValue = "1") int pageNumber,                                               @RequestParam(value = "numberPerPage", required = false, defaultValue = "15") int numberPerPage,                                               @RequestParam(value = "name", required = false, defaultValue = "") String name,                                               @RequestParam(value = "mobilePartner", required = false, defaultValue = "") String mobilePartner,                                               @RequestParam(value = "status", required = false, defaultValue = "") Long status,                                               @RequestParam(value = "fromDate", required = false, defaultValue = "") String fromDate,                                               @RequestParam(value = "toDate", required = false, defaultValue = "") String toDate) {        PagingResult page = new PagingResult();        page.setPageNumber(pageNumber);        page.setNumberPerPage(numberPerPage);        try {            page = affConfigContractService.page(page, name, mobilePartner, status, fromDate, toDate).orElse(new PagingResult());        } catch (Exception e) {            return new ResponseEntity<>(null, HttpStatus.OK);        }        return new ResponseEntity<>(page, HttpStatus.OK);    }    @RequestMapping(value = "/add", method = RequestMethod.POST)    public ResponseEntity<?> addPost(@RequestBody final AffConfigContract affConfigContract) {        try {            Authentication auth = SecurityContextHolder.getContext()                    .getAuthentication();            affConfigContract.setCreate_by(auth.getName());            affConfigContract.setGen_date(new Date(System.currentTimeMillis()));            Long id = affConfigContractService.add(affConfigContract);            return new ResponseEntity<>(id, HttpStatus.OK);        } catch (Exception e) {            e.printStackTrace();            return new ResponseEntity<>("1", HttpStatus.OK);        }    }    @RequestMapping(value = "/detail.html", method = RequestMethod.GET)    public String edit() {        return "config-contract.detail";    }    @RequestMapping(value = "/get", method = RequestMethod.GET)    public ResponseEntity<?> get(@RequestParam(value = "id") Long id) {        AffConfigContract affConfigContract = affConfigContractService.getDetail(id);        if (affConfigContract == null) return new ResponseEntity<>(null, HttpStatus.OK);        return new ResponseEntity<>(affConfigContract, HttpStatus.OK);    }    @RequestMapping(value = "/detail.html", method = RequestMethod.POST)    public ResponseEntity<?> saveEdit(@RequestBody AffConfigContract affConfigContract) {        try {            Authentication auth = SecurityContextHolder.getContext()                    .getAuthentication();            AffConfigContract editObj = affConfigContractDao.getDetail(affConfigContract.getId());            if (editObj != null) {                editObj.setUpdate_by(auth.getName());                editObj.setLast_updated(new Date(System.currentTimeMillis()));                editObj.setName(affConfigContract.getName());                editObj.setDescription(affConfigContract.getDescription());                editObj.setStatus(affConfigContract.getStatus());                editObj.setM_bl_post_bonus(affConfigContract.getM_bl_post_bonus());                editObj.setM_bl_post_osp(affConfigContract.getM_bl_post_osp());                editObj.setM_bl_post_ctv(affConfigContract.getM_bl_post_ctv());                editObj.setM_bl_post_ref(affConfigContract.getM_bl_post_ref());                editObj.setM_bl_pre_bonus(affConfigContract.getM_bl_pre_bonus());                editObj.setM_bl_pre_osp(affConfigContract.getM_bl_pre_osp());                editObj.setM_bl_pre_ctv(affConfigContract.getM_bl_pre_ctv());                editObj.setM_bl_pre_ref(affConfigContract.getM_bl_pre_ref());                editObj.setM_package_osp(affConfigContract.getM_package_osp());                editObj.setM_package_ctv(affConfigContract.getM_package_ctv());                editObj.setM_package_ref(affConfigContract.getM_package_ref());                editObj.setVnp_package_osp(affConfigContract.getVnp_package_osp());                editObj.setVnp_package_ctv(affConfigContract.getVnp_package_ctv());            } else {                return new ResponseEntity<>("1", HttpStatus.OK);            }            boolean isUpdate = affConfigContractService.edit(editObj);            if (!isUpdate) return new ResponseEntity<>("1", HttpStatus.OK);            return new ResponseEntity<>("0", HttpStatus.OK);        } catch (Exception e) {            e.printStackTrace();            return new ResponseEntity<>("1", HttpStatus.OK);        }    }    @RequestMapping(value = "/delete", method = RequestMethod.POST)    public ResponseEntity<?> delete(@RequestBody AffConfigContract affConfigContract) {        try {            Authentication auth = SecurityContextHolder.getContext()                    .getAuthentication();            AffConfigContract editObj = affConfigContractDao.getDetail(affConfigContract.getId());            if (editObj != null) {                editObj.setUpdate_by(auth.getName());                editObj.setLast_updated(new Date(System.currentTimeMillis()));                editObj.setStatus(Constants.STATUS_CONFIG_CONTRACT.DELETEBYOSP);            }            boolean isUpdate = affConfigContractService.edit(editObj);            if (!isUpdate) return new ResponseEntity<>("1", HttpStatus.OK);            return new ResponseEntity<>("0", HttpStatus.OK);        } catch (Exception e) {            e.printStackTrace();            return new ResponseEntity<>("1", HttpStatus.OK);        }    }    @RequestMapping(value = "/getPartnerConfig", method = RequestMethod.GET)    public ResponseEntity<?> getPartnerConfig(@RequestParam(value = "p", defaultValue = "1") int pageNumber,                                              @RequestParam(value = "numberPerPage", defaultValue = "15") int numberPerPage,                                              @RequestParam(value = "mobilePartner", required = false, defaultValue = "") String mobilePartner,                                              @RequestParam(value = "nameConfig", required = false, defaultValue = "") String nameConfig,                                              @RequestParam(value = "fromDate", required = false, defaultValue = "") String fromDate,                                              @RequestParam(value = "toDate", required = false, defaultValue = "") String toDate) {        PagingResult page = new PagingResult();        page.setPageNumber(pageNumber);        page.setNumberPerPage(numberPerPage);        try {            page = affConfigContractService.getPartnerConfig(page, mobilePartner, fromDate, toDate, nameConfig).orElse(new PagingResult());        } catch (Exception e) {            return new ResponseEntity<>(null, HttpStatus.OK);        }        return new ResponseEntity<>(page, HttpStatus.OK);    }    @RequestMapping(value = "/getNameConfig", method = RequestMethod.GET)    public ResponseEntity<?> getNameConfig(@RequestParam(value = "mobilePartner") String mobilePartner) {        List<HashMap<String, String>> result = affConfigContractService.getNameConfig(mobilePartner);        return new ResponseEntity<>(result, HttpStatus.OK);    }    @RequestMapping(value = "/udpateConfigForPartner", method = RequestMethod.POST)    public ResponseEntity<?> udpateConfigForPartner(@RequestBody ChangeConfigContractView changeConfigContractView) {        try {            for (AffConfigContractView affConfigContractView : changeConfigContractView.getAffConfigContractViews()) {                partnerDao.updateConfigForPartner(affConfigContractView.getPartnerId(), changeConfigContractView.getId());            }            return new ResponseEntity<>("0", HttpStatus.OK);        } catch (Exception e) {            e.printStackTrace();            return new ResponseEntity<>("1", HttpStatus.OK);        }    }    @RequestMapping(value = "/getBase", method = RequestMethod.GET)    public ResponseEntity<?> getBase() {        AffConfigContract affConfigContract = affConfigContractService.getDetail(1L);        return new ResponseEntity<>(affConfigContract, HttpStatus.OK);    }    /*@RequestMapping(value = "/swapConfig", method = RequestMethod.POST)    public ResponseEntity<?> swapConfig(@RequestBody AffConfigContractView affConfigContractView) {        Authentication auth = SecurityContextHolder.getContext()                .getAuthentication();        if (affConfigContractView == null) return new ResponseEntity<>("0", HttpStatus.OK);        String name = "Cấu hình hoa hồng dành cho: " + affConfigContractView.getMobile();        AffConfigContract addObj = affConfigContractDao.getByName(name);        //case addObj already exists-update addObj        if (addObj == null) {            addObj = new AffConfigContract();            addObj.setCreate_by(auth.getName());            addObj.setGen_date(new Date(System.currentTimeMillis()));            addObj.setDescription("Đây là cấu hình hoa hồng riêng dành cho: " + affConfigContractView.getMobile());            addObj.setName(name);            addObj.setM_bl_pre_bonus(affConfigContractView.getM_bl_pre_bonus());            addObj.setM_bl_pre_osp(affConfigContractView.getM_bl_pre_osp());            addObj.setM_bl_pre_ctv(affConfigContractView.getM_bl_pre_ctv());            addObj.setM_bl_post_bonus(affConfigContractView.getM_bl_post_bonus());            addObj.setM_bl_post_osp(affConfigContractView.getM_bl_post_osp());            addObj.setM_bl_post_ctv(affConfigContractView.getM_bl_post_ctv());            addObj.setM_package_osp(affConfigContractView.getM_package_osp());            addObj.setM_package_ctv(affConfigContractView.getM_package_ctv());            addObj.setM_package_ref(affConfigContractView.getM_package_ref());            Boolean isAdd = affConfigContractService.add(addObj);            if (!isAdd) return new ResponseEntity<>("1", HttpStatus.OK);            AffConfigContract check = affConfigContractDao.getByName(name);            //update            boolean isUpdate = partnerDao.updateConfigForPartner(affConfigContractView.getPartnerId(), check.getId());            if (!isUpdate) {                return new ResponseEntity<>("1", HttpStatus.OK);            }            return new ResponseEntity<>("0", HttpStatus.OK);        } else {            //case addObj does not exist-create new affConfig            addObj.setUpdate_by(auth.getName());            addObj.setLast_updated(new Date(System.currentTimeMillis()));            addObj.setM_bl_pre_bonus(affConfigContractView.getM_bl_pre_bonus());            addObj.setM_bl_pre_osp(affConfigContractView.getM_bl_pre_osp());            addObj.setM_bl_pre_ctv(affConfigContractView.getM_bl_pre_ctv());            addObj.setM_bl_post_bonus(affConfigContractView.getM_bl_post_bonus());            addObj.setM_bl_post_osp(affConfigContractView.getM_bl_post_osp());            addObj.setM_bl_post_ctv(affConfigContractView.getM_bl_post_ctv());            addObj.setM_package_osp(affConfigContractView.getM_package_osp());            addObj.setM_package_ctv(affConfigContractView.getM_package_ctv());            addObj.setM_package_ref(affConfigContractView.getM_package_ref());            Boolean isUpdate = affConfigContractService.edit(addObj);            if (!isUpdate) return new ResponseEntity<>("1", HttpStatus.OK);            boolean fl = partnerDao.updateConfigForPartner(affConfigContractView.getPartnerId(), addObj.getId());            if (!fl) {                return new ResponseEntity<>("1", HttpStatus.OK);            }            return new ResponseEntity<>("0", HttpStatus.OK);        }    }*/}