package com.ada.web.controller;import com.ada.common.PagingResult;import com.ada.web.service.BalanceHistoryService;import com.ada.web.service.chonsoApi.BalanceHistoryServiceAPI;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.RequestParam;@Controller@RequestMapping("/payment")public class BalanceHistoryController {    private Logger logger = LogManager.getLogger(BalanceHistoryController.class);    @Autowired    private BalanceHistoryService balanceHistoryService;    @Autowired    private BalanceHistoryServiceAPI balanceHistoryServiceAPI;    @RequestMapping(value = "/getHistory", method = RequestMethod.GET)    public ResponseEntity getHistory(@RequestParam(value = "pageNumber", required = false, defaultValue = "1") int pageNumber,                                     @RequestParam(value = "numberPerPage", required = false, defaultValue = "15") int numberPerPage,                                     @RequestParam(value = "username") String username,                                     @RequestParam(value = "itemName", required = false, defaultValue = "") String itemName,                                     @RequestParam(value = "transType", required = false, defaultValue = "-1") Long transType,                                     @RequestParam(value = "fromDate", required = false, defaultValue = "") String fromDate,                                     @RequestParam(value = "toDate", required = false, defaultValue = "") String toDate) {        PagingResult page = new PagingResult();        page.setPageNumber(pageNumber);        page.setNumberPerPage(numberPerPage);        try {            page = balanceHistoryService.page(page, username, itemName, transType, fromDate, toDate).orElse(new PagingResult());            /*BalanceHistoryRequest request = new BalanceHistoryRequest();            request.setUsername(username);            request.setPage(pageNumber);            request.setNumToPage(numberPerPage);            request.setMsisdn(itemName);            if (transType == -1) {                request.setTransType(numberPerPage);            } else {                request.setTransType(Integer.valueOf(transType.toString()));            }            request.setFormDate(Utils.str2date(fromDate, "DD/MM/YYYY"));            request.setToDate(Utils.str2date(toDate, "DD/MM/YYYY"));            BalanceHistoryResponse balanceHistoryResponse = balanceHistoryServiceAPI.getBalance(request, null);*/            return new ResponseEntity<>(page, HttpStatus.OK);        } catch (Exception e) {            e.printStackTrace();        }        return new ResponseEntity<>("-1", HttpStatus.OK);    }    @RequestMapping(value = "/getBalanceWithdraw", method = RequestMethod.GET)    public ResponseEntity getBalanceWithdraw(@RequestParam(value = "username") String username) {        Long balance = balanceHistoryService.getBalanceWithdraw(username);        if (balance == null) {            return new ResponseEntity<>("-1", HttpStatus.OK);        }        return new ResponseEntity<>(balance, HttpStatus.OK);    }}