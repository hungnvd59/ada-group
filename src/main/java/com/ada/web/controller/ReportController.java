package com.ada.web.controller;import com.ada.common.PagingResult;import com.ada.model.view.ServiceNameView;import com.ada.web.dao.ReportDao;import com.ada.web.service.ReportService;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.List;@Controller@RequestMapping("/transReport")public class ReportController {    @Autowired    ReportService reportService;    @Autowired    ReportDao reportDao;    private SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");    private Logger logger = LogManager.getLogger(ReportController.class);    @GetMapping("/tong-hop-theo-ngay.html")    public String byDay() {        return "transReport.day";    }    @GetMapping("/tong-hop-theo-ctv.html")    public String byCTV() {        return "transReport.CTV";    }    @GetMapping("/tong-hop-theo-divu.html")    public String byDivu() {        return "transReport.divu";    }    @GetMapping("/thong-ke-ctv.html")    public String reportCTV() {        return "report.CTV";    }    @GetMapping("/searchByDay")    public ResponseEntity<PagingResult> searchByDay(@RequestParam(value = "p", required = false, defaultValue = "1") int pageNumber,                                                    @RequestParam(value = "numberPerPage", required = false, defaultValue = "15") int numberPerPage,                                                    @RequestParam(value = "itemType", required = false, defaultValue = "") String itemType,                                                    @RequestParam(value = "itemName", required = false, defaultValue = "") String itemName,                                                    @RequestParam(value = "msisdnContract", required = false, defaultValue = "") String msisdnContract,                                                    @RequestParam(value = "userName", required = false, defaultValue = "") String userName,                                                    @RequestParam(value = "fromDate", required = false, defaultValue = "") String fromDate,                                                    @RequestParam(value = "toDate", required = false, defaultValue = "") String toDate) {        PagingResult page = new PagingResult();        page.setPageNumber(pageNumber);        page.setNumberPerPage(numberPerPage);        try {            Timestamp fromDateT = null;            Timestamp toDateT = null;            if (fromDate != null && !"".equals(fromDate)) {                String strFdate = fromDate + " 00:00:00";                fromDateT = new Timestamp(sdf.parse(strFdate).getTime());            }            if (toDate != null && !"".equals(toDate)) {                String strTdate = toDate + " 23:59:59";                toDateT = new Timestamp(sdf.parse(strTdate).getTime());            }            page = reportService.pageByDay(page, itemType, itemName, msisdnContract, userName, fromDateT, toDateT);        } catch (Exception e) {            e.printStackTrace();            return new ResponseEntity<>(null, HttpStatus.OK);        }        return new ResponseEntity<>(page, HttpStatus.OK);    }    @GetMapping("/searchByCtv")    public ResponseEntity<PagingResult> searchByCtv(@RequestParam(value = "p", required = false, defaultValue = "1") int pageNumber,                                                    @RequestParam(value = "numberPerPage", required = false, defaultValue = "15") int numberPerPage,                                                    @RequestParam(value = "itemType", required = false, defaultValue = "") String itemType,                                                    @RequestParam(value = "itemName", required = false, defaultValue = "") String itemName,                                                    @RequestParam(value = "msisdnContract", required = false, defaultValue = "") String msisdnContract,                                                    @RequestParam(value = "userName", required = false, defaultValue = "") String userName,                                                    @RequestParam(value = "fromDate", required = false, defaultValue = "") String fromDate,                                                    @RequestParam(value = "toDate", required = false, defaultValue = "") String toDate) {        PagingResult page = new PagingResult();        page.setPageNumber(pageNumber);        page.setNumberPerPage(numberPerPage);        try {            Timestamp fromDateT = null;            Timestamp toDateT = null;            if (fromDate != null && !"".equals(fromDate)) {                String strFdate = fromDate + " 00:00:00";                fromDateT = new Timestamp(sdf.parse(strFdate).getTime());            }            if (toDate != null && !"".equals(toDate)) {                String strTdate = toDate + " 23:59:59";                toDateT = new Timestamp(sdf.parse(strTdate).getTime());            }            page = reportService.pageByCtv(page, itemType, itemName, msisdnContract, userName, fromDateT, toDateT);        } catch (Exception e) {            e.printStackTrace();            return new ResponseEntity<>(null, HttpStatus.OK);        }        return new ResponseEntity<>(page, HttpStatus.OK);    }    @GetMapping("/searchByDivu")    public ResponseEntity<PagingResult> searchByDivu(@RequestParam(value = "p", required = false, defaultValue = "1") int pageNumber,                                                     @RequestParam(value = "numberPerPage", required = false, defaultValue = "15") int numberPerPage,                                                     @RequestParam(value = "itemType", required = false, defaultValue = "") String itemType,                                                     @RequestParam(value = "msisdnContract", required = false, defaultValue = "") String msisdnContract,                                                     @RequestParam(value = "userName", required = false, defaultValue = "") String userName,                                                     @RequestParam(value = "fromDate", required = false, defaultValue = "") String fromDate,                                                     @RequestParam(value = "toDate", required = false, defaultValue = "") String toDate) {        PagingResult page = new PagingResult();        page.setPageNumber(pageNumber);        page.setNumberPerPage(numberPerPage);        try {            Timestamp fromDateT = null;            Timestamp toDateT = null;            if (fromDate != null && !"".equals(fromDate)) {                String strFdate = fromDate + " 00:00:00";                fromDateT = new Timestamp(sdf.parse(strFdate).getTime());            }            if (toDate != null && !"".equals(toDate)) {                String strTdate = toDate + " 23:59:59";                toDateT = new Timestamp(sdf.parse(strTdate).getTime());            }            page = reportService.pageByDivu(page, itemType, msisdnContract, userName, fromDateT, toDateT);        } catch (Exception e) {            e.printStackTrace();            return new ResponseEntity<>(null, HttpStatus.OK);        }        return new ResponseEntity<>(page, HttpStatus.OK);    }    @GetMapping("/searchPartner")    public ResponseEntity<PagingResult> searchPartner(@RequestParam(value = "p", required = false, defaultValue = "1") int pageNumber,                                                      @RequestParam(value = "numberPerPage", required = false, defaultValue = "15") int numberPerPage,                                                      @RequestParam(value = "fromDate", required = false, defaultValue = "") String fromDate,                                                      @RequestParam(value = "toDate", required = false, defaultValue = "") String toDate) {        PagingResult page = new PagingResult();        page.setPageNumber(pageNumber);        page.setNumberPerPage(numberPerPage);        try {            Timestamp fromDateT = null;            Timestamp toDateT = null;            if (fromDate != null && !"".equals(fromDate)) {                String strFdate = fromDate + " 00:00:00";                fromDateT = new Timestamp(sdf.parse(strFdate).getTime());            }            if (toDate != null && !"".equals(toDate)) {                String strTdate = toDate + " 23:59:59";                toDateT = new Timestamp(sdf.parse(strTdate).getTime());            }            page = reportService.reportPartner(page, fromDateT, toDateT);        } catch (Exception e) {            e.printStackTrace();            return new ResponseEntity<>(null, HttpStatus.OK);        }        return new ResponseEntity<>(page, HttpStatus.OK);    }    @GetMapping("/getTotalPartner")    public ResponseEntity<PagingResult> getTotalPartner(@RequestParam(value = "fromDate", required = false, defaultValue = "") String fromDate,                                                @RequestParam(value = "toDate", required = false, defaultValue = "") String todate) {        PagingResult page = new PagingResult();        try {            Long totalPartner = reportService.reportTotalPartner(fromDate, todate);            page.setRowCount(totalPartner);            return new ResponseEntity<>(page, HttpStatus.OK);        } catch (Exception e) {            e.printStackTrace();            return new ResponseEntity<>(page, HttpStatus.OK);        }    }    @GetMapping("/getProduct")    public ResponseEntity<List<ServiceNameView>> getProduct(@RequestParam(value = "itemType", required = true, defaultValue = "") String itemType) {        List<ServiceNameView> result = new ArrayList<>();        try {            result = reportDao.listDivu(itemType);        } catch (Exception e) {            e.printStackTrace();            return new ResponseEntity<>(null, HttpStatus.OK);        }        return new ResponseEntity<>(result, HttpStatus.OK);    }}